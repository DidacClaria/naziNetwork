<!DOCTYPE html>
<html>
<head>
    <!-- FONTS -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Abhaya+Libre&family=Alatsi&family=Bebas+Neue&family=Poppins&family=Federant&display=swap" rel="stylesheet">
    <!-- LIBRARIES -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script type="text/javascript" src="https://unpkg.com/vis-network/standalone/umd/vis-network.min.js"></script>

    <style type="text/css">
        #mynetwork {
            flex-grow: 2; /* default 0 */
        }

        #myCanvas {
          width: 60px;
          height: 60px;
        }

        .container {
          display: flex; /* or inline-flex */
          height: 99vh;
        }

        #settings {
          box-shadow: 0px 0px 5px 0px rgba(0,0,0,0.25);
          width: 300px;
          background: white;
          border-radius: 20px;
          position: absolute;
          left: 0;
          height: 95%;
          margin: 20px;
        }

        #info-card {
          box-shadow: 0px 0px 5px 0px rgba(0,0,0,0.25);
          width: 300px;
          background: white;
          border-radius: 20px;
          position: absolute;
          right: 0;
          height: 95%;
          margin: 20px;
        }

        .circular--portrait {
          display: flex;
          align-items: center;
          justify-content: center;
          width: 200px;
          height: 200px;
          overflow: hidden;
          border-radius: 50%;
        }

        .circular--portrait img {
          width: 100%;
          height: 100%;
          object-fit: cover;

        }

    </style>
</head>
<body>
<div class="container">
</div>
<div class="container">
  <div id="mynetwork"></div>
  <div id="settings">

  </div>
  <div id="info-card" style="display: none">
    <img src="https://www.svgrepo.com/show/83454/cross.svg" onclick="neighbourhoodHighlight();toggleInfoCard();" width="12" height="12" style="padding-top: 20px;padding-left: 20px;">
    <center style="padding:20px">
      <div class="circular--portrait">
        <img id="info-card-img" src="https://t4.ftcdn.net/jpg/00/64/67/63/360_F_64676383_LdbmhiNM6Ypzb3FM4PPuFP9rHe7ri8Ju.jpg"></img>
      </div>
    </center>
  </div>
</div>

<script type="text/javascript">

    var GCCnodes = new vis.DataSet([]);
    buildGCCNodes();

    function buildGCCNodes(){

        <% @nazisNodesGCC.each do |node| %>
            GCCnodes.add({
                id: '<%= node['0'] %>',
                shape: 'circularImage',
                image: '/Hitler_portrait_crop.jpeg',
                label: '<%= node['0'] %>',
                widthMin: 20,
                widthMax: 20
            });
        <% end %>
    }

    var nodes = new vis.DataSet([]);
    <% @nazisNodes.each do |node| %>


     //   var img = new Image();
     //   var c=document.createElement("canvas");
     //   c.setAttribute("id","myCanvas");
     //   var ctx=c.getContext("2d");
     //   ctx.imageSmoothingQuality = "high";
     //   var imageObj1 = new Image();
     //   var imageObj2 = new Image();
     //   imageObj1.src = "Hitler_portrait_crop.jpeg"

     //   imageObj1.onload = function() {

     //         var MAX_WIDTH = 60;
     //         var MAX_HEIGHT = 60;
     //         var width = imageObj1.width;
     //         var height = imageObj1.height;

     // // Add the resizing logic
     //         if (width > height) {
     //           if (width > MAX_WIDTH) {
     //             height *= MAX_WIDTH / width;
     //             width = MAX_WIDTH;
     //           }
     //         } else {
     //           if (height > MAX_HEIGHT) {
     //             width *= MAX_HEIGHT / height;
     //             height = MAX_HEIGHT;
     //           }
     //         }

     // //Specify the resizing result
     //         c.width = width;
     //         c.height = height;
     //         ctx.drawImage(imageObj1, 0, 0, width, height);

     //      // ctx.drawImage(imageObj1, 0, 0, 30, 30);
     //      imageObj2.src = "redBackground.png";
     //      imageObj2.onload = function() {
     //         ctx.drawImage(imageObj2, 0, 0, width, height);
     //         img.src = c.toDataURL("image/png",[0.0,1.0]);

     //      }
     //   };

      nodes.add({
          id: '<%= node['Name'] %>',
          shape: 'circularImage',
          image: '/Hitler_portrait_crop.jpeg',
          label: '<%= node['Name'] %>',
          widthMin: 20,
          widthMax: 20
      });
    <% end %>

    var edges = new vis.DataSet([]);
    <% @nazisLinks.each do |link| %>
      edges.add({from: '<%= link['Source Node']%>', to: '<%=link['Target Node']%>'});
    <% end %>

    var network;
    var allNodes;
    var highlightActive = false;


    function redrawAll() {
      var container = document.getElementById("mynetwork");
      var options = {
        nodes:{
          borderWidth: 0,
          borderWidthSelected: 0,
          brokenImage:undefined,
          fixed: false,
          font: {
            color: '#343434',
            size: 14, // px
            face: 'Federant',
          },
          opacity: 0.8,
          scaling: {
            label: true
          },
          shadow: true,
          shapeProperties: {
            interpolation: false    // 'true' for intensive zooming
          },
          font: {
            size: 12,
            face: "Tahoma",
          },
        },
        edges:{
          color: {
            opacity:0.5
          },
          selectionWidth: 3,
          width: 0.5,
        },
        physics: {
          stabilization: {
              enabled: true,
              fit: true
          },
          solver: 'forceAtlas2Based',
          forceAtlas2Based: {
            theta: 0.5,
            gravitationalConstant: -50,
            centralGravity: 0.01,
            springConstant: 0.08,
            springLength: 200,
            damping: 0.4,
            avoidOverlap: 1
          }
        },
        layout: {
          improvedLayout:false
        }

      };

      var data = {
        nodes: nodes,
        edges: edges
      };

      network = new vis.Network(container, data, options);

      // get a JSON object
      allNodes = nodes.get({ returnType: "Object" });

      // SET NODE SIZE ACCORDING TO THE PARAM
      updateNodeSize();

      // LISTENERS FOR NODE CLICK ACTION
      network.on('click', function(properties) {
          neighbourhoodHighlight(properties);
          toggleInfoCard(properties);
      });

      // DISABLE PHYSICS
      network.on("stabilizationIterationsDone", function () {
          network.setOptions( { physics: false } );
      });

    }

    function updateNodeSize(){
      for (var nodeId in allNodes) {
        allNodes[nodeId].size = 2*network.getConnectedEdges(nodeId).length;
      }
      // transform the object into an array
      var updateArray = [];
      for (nodeId in allNodes) {
        if (allNodes.hasOwnProperty(nodeId)) {
          updateArray.push(allNodes[nodeId]);
        }
      }
      nodes.update(updateArray);
    }

    function neighbourhoodHighlight(params) {
        // if something is selected:
        if (params && params.nodes.length > 0) {
          highlightActive = true;
          var i, j;
          var selectedNode = params.nodes[0];
          var degrees = 2;

          // mark all nodes as hard to read.
          for (var nodeId in allNodes) {
            allNodes[nodeId].color = "rgba(200,200,200,0.5)";
            allNodes[nodeId].opacity = 0.1;
            if (allNodes[nodeId].hiddenLabel === undefined) {
              allNodes[nodeId].hiddenLabel = allNodes[nodeId].label;
              allNodes[nodeId].label = undefined;
            }
          }
          var connectedNodes = network.getConnectedNodes(selectedNode);
          var allConnectedNodes = [];

          // get the second degree nodes
          for (i = 1; i < degrees; i++) {
            for (j = 0; j < connectedNodes.length; j++) {
              allConnectedNodes = allConnectedNodes.concat(
                network.getConnectedNodes(connectedNodes[j])
              );
            }
          }

          // all second degree nodes get a different color and their label back
          for (i = 0; i < allConnectedNodes.length; i++) {
            allNodes[allConnectedNodes[i]].color = "rgba(150,150,150,0.75)";
            allNodes[nodeId].opacity = 0.8;
            if (allNodes[allConnectedNodes[i]].hiddenLabel !== undefined) {
              allNodes[allConnectedNodes[i]].label =
                allNodes[allConnectedNodes[i]].hiddenLabel;
              allNodes[allConnectedNodes[i]].hiddenLabel = undefined;
            }
          }

          // all first degree nodes get their own color and their label back
          for (i = 0; i < connectedNodes.length; i++) {
            allNodes[connectedNodes[i]].color = '#97C2FC';
            allNodes[connectedNodes[i]].opacity = 0.8;
            if (allNodes[connectedNodes[i]].hiddenLabel !== undefined) {
              allNodes[connectedNodes[i]].label =
                allNodes[connectedNodes[i]].hiddenLabel;
              allNodes[connectedNodes[i]].hiddenLabel = undefined;
            }
          }

          // the main node gets its own color and its label back.
          allNodes[selectedNode].color = '#97C2FC';
          allNodes[selectedNode].opacity = 0.8;
          if (allNodes[selectedNode].hiddenLabel !== undefined) {
            allNodes[selectedNode].label = allNodes[selectedNode].hiddenLabel;
            allNodes[selectedNode].hiddenLabel = undefined;
          }
        } else if (highlightActive === true) {
          // reset all nodes
          for (var nodeId in allNodes) {
            allNodes[nodeId].color = '#97C2FC';
            allNodes[nodeId].opacity = 0.8;
            if (allNodes[nodeId].hiddenLabel !== undefined) {
              allNodes[nodeId].label = allNodes[nodeId].hiddenLabel;
              allNodes[nodeId].hiddenLabel = undefined;
            }
          }
          highlightActive = false;
        }

        // transform the object into an array
        var updateArray = [];
        for (nodeId in allNodes) {
          if (allNodes.hasOwnProperty(nodeId)) {
            updateArray.push(allNodes[nodeId]);
          }
        }
        nodes.update(updateArray);
    }

    function toggleInfoCard(properties){
        if (properties && nodes.get(properties.nodes) != ""){
          var clickedNodes = nodes.get(properties.nodes);
          $('#info-card-img').attr("src",clickedNodes[0]['image']);
          $('#info-card').fadeIn();
        }
        else {
          $('#info-card').fadeOut();
          $('#info-card').promise().done(function(){
              // will be called when all the animations on the queue finish
              $('#info-card-img').attr("src",'https://t4.ftcdn.net/jpg/00/64/67/63/360_F_64676383_LdbmhiNM6Ypzb3FM4PPuFP9rHe7ri8Ju.jpg');
          });
        }
    }

    redrawAll();


</script>
</body>
</html>
